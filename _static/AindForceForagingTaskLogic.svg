<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: Entity Relationship Diagram created by erdantic Pages: 1 -->
<svg width="1738pt" height="570pt"
 viewBox="0.00 0.00 1738.00 570.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 566)">
<title>Entity Relationship Diagram created by erdantic</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-566 1734,-566 1734,4 -4,4"/>
<text text-anchor="middle" x="865" y="-6.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="9.00" fill="#a8a8a8">Created by erdantic v1.0.5 &lt;https://github.com/drivendataorg/erdantic&gt;</text>
<!-- aind_behavior_force_foraging.task_logic.AindForceForagingTaskLogic -->
<g id="node1" class="node">
<title>aind_behavior_force_foraging.task_logic.AindForceForagingTaskLogic</title>
<g id="a_node1"><a xlink:title="aind_behavior_force_foraging.task_logic.AindForceForagingTaskLogic&#10;&#10;Base Task Primitive.&#10;Holds Task metadata and parameters.&#10;">
<polygon fill="none" stroke="black" points="0,-541 0,-562 294,-562 294,-541 0,-541"/>
<text text-anchor="start" x="59.5" y="-548.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">AindForceForagingTaskLogic</text>
<polygon fill="none" stroke="black" points="0,-520 0,-541 95,-541 95,-520 0,-520"/>
<text text-anchor="start" x="32" y="-526.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">name</text>
<polygon fill="none" stroke="black" points="95,-520 95,-541 294,-541 294,-520 95,-520"/>
<text text-anchor="start" x="116" y="-526.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;AindForceForaging&#39;]</text>
<polygon fill="none" stroke="black" points="0,-499 0,-520 95,-520 95,-499 0,-499"/>
<text text-anchor="start" x="17" y="-505.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">description</text>
<polygon fill="none" stroke="black" points="95,-499 95,-520 294,-520 294,-499 95,-499"/>
<text text-anchor="start" x="187.5" y="-505.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="0,-478 0,-499 95,-499 95,-478 0,-478"/>
<text text-anchor="start" x="3" y="-484.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">task_parameters</text>
<polygon fill="none" stroke="black" points="95,-478 95,-499 294,-499 294,-478 95,-478"/>
<text text-anchor="start" x="98" y="-484.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">AindForceForagingTaskParameters</text>
<polygon fill="none" stroke="black" points="0,-457 0,-478 95,-478 95,-457 0,-457"/>
<text text-anchor="start" x="27.5" y="-463.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">version</text>
<polygon fill="none" stroke="black" points="95,-457 95,-478 294,-478 294,-457 95,-457"/>
<text text-anchor="start" x="155.5" y="-463.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;0.1.0&#39;]</text>
<polygon fill="none" stroke="black" points="0,-436 0,-457 95,-457 95,-436 0,-436"/>
<text text-anchor="start" x="15" y="-442.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">stage_name</text>
<polygon fill="none" stroke="black" points="95,-436 95,-457 294,-457 294,-436 95,-436"/>
<text text-anchor="start" x="159.5" y="-442.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[str]</text>
</a>
</g>
</g>
<!-- aind_behavior_force_foraging.task_logic.AindForceForagingTaskParameters -->
<g id="node2" class="node">
<title>aind_behavior_force_foraging.task_logic.AindForceForagingTaskParameters</title>
<g id="a_node2"><a xlink:title="aind_behavior_force_foraging.task_logic.AindForceForagingTaskParameters&#10;&#10;Set of parameters associated with a subject task.&#10;Subclass with Task Parameters.&#10;">
<polygon fill="none" stroke="black" points="402,-477 402,-498 770,-498 770,-477 402,-477"/>
<text text-anchor="start" x="481" y="-484.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">AindForceForagingTaskParameters</text>
<polygon fill="none" stroke="black" points="402,-456 402,-477 610,-477 610,-456 402,-456"/>
<text text-anchor="start" x="481.5" y="-462.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">rng_seed</text>
<polygon fill="none" stroke="black" points="610,-456 610,-477 770,-477 770,-456 610,-456"/>
<text text-anchor="start" x="649" y="-462.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[float]</text>
<polygon fill="none" stroke="black" points="402,-435 402,-456 610,-456 610,-435 402,-435"/>
<text text-anchor="start" x="405" y="-441.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">aind_behavior_services_pkg_version</text>
<polygon fill="none" stroke="black" points="610,-435 610,-456 770,-456 770,-435 610,-435"/>
<text text-anchor="start" x="651" y="-441.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;0.9.0&#39;]</text>
<polygon fill="none" stroke="black" points="402,-414 402,-435 610,-435 610,-414 402,-414"/>
<text text-anchor="start" x="471" y="-420.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">environment</text>
<polygon fill="none" stroke="black" points="610,-414 610,-435 770,-435 770,-414 610,-414"/>
<text text-anchor="start" x="654" y="-420.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Environment</text>
<polygon fill="none" stroke="black" points="402,-393 402,-414 610,-414 610,-393 402,-393"/>
<text text-anchor="start" x="483" y="-399.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">updaters</text>
<polygon fill="none" stroke="black" points="610,-393 610,-414 770,-414 770,-393 610,-393"/>
<text text-anchor="start" x="613" y="-399.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Dict[str, NumericalUpdater]</text>
<polygon fill="none" stroke="black" points="402,-372 402,-393 610,-393 610,-372 402,-372"/>
<text text-anchor="start" x="457.5" y="-378.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">operation_control</text>
<polygon fill="none" stroke="black" points="610,-372 610,-393 770,-393 770,-372 610,-372"/>
<text text-anchor="start" x="642" y="-378.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">OperationControl</text>
</a>
</g>
</g>
<!-- aind_behavior_force_foraging.task_logic.AindForceForagingTaskLogic&#45;&gt;aind_behavior_force_foraging.task_logic.AindForceForagingTaskParameters -->
<g id="edge1" class="edge">
<title>aind_behavior_force_foraging.task_logic.AindForceForagingTaskLogic:e&#45;&gt;aind_behavior_force_foraging.task_logic.AindForceForagingTaskParameters:w</title>
<path fill="none" stroke="black" d="M304.12,-488C339,-488 353.76,-488 386.67,-488"/>
<polyline fill="none" stroke="black" points="294,-488 299,-488 "/>
<polyline fill="none" stroke="black" points="299,-488 304,-488 "/>
<polyline fill="none" stroke="black" points="402,-488 397,-488 "/>
<polygon fill="black" stroke="black" points="396,-483 396,-493 394,-493 394,-483 396,-483"/>
<polyline fill="none" stroke="black" points="397,-488 392,-488 "/>
<polygon fill="black" stroke="black" points="391,-483 391,-493 389,-493 389,-483 391,-483"/>
<polyline fill="none" stroke="black" points="392,-488 387,-488 "/>
</g>
<!-- aind_behavior_force_foraging.task_logic.Environment -->
<g id="node3" class="node">
<title>aind_behavior_force_foraging.task_logic.Environment</title>
<g id="a_node3"><a xlink:title="aind_behavior_force_foraging.task_logic.Environment&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="892,-513 892,-534 1100,-534 1100,-513 892,-513"/>
<text text-anchor="start" x="957" y="-520.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Environment</text>
<polygon fill="none" stroke="black" points="892,-492 892,-513 982,-513 982,-492 892,-492"/>
<text text-anchor="start" x="895" y="-498.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">block_statistics</text>
<polygon fill="none" stroke="black" points="982,-492 982,-513 1100,-513 1100,-492 982,-492"/>
<text text-anchor="start" x="985" y="-498.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">List[BlockStatistics]</text>
<polygon fill="none" stroke="black" points="892,-471 892,-492 982,-492 982,-471 892,-471"/>
<text text-anchor="start" x="918" y="-477.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">shuffle</text>
<polygon fill="none" stroke="black" points="982,-471 982,-492 1100,-492 1100,-471 982,-471"/>
<text text-anchor="start" x="1028.5" y="-477.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">bool</text>
<polygon fill="none" stroke="black" points="892,-450 892,-471 982,-471 982,-450 892,-450"/>
<text text-anchor="start" x="902" y="-456.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">repeat_count</text>
<polygon fill="none" stroke="black" points="982,-450 982,-471 1100,-471 1100,-450 982,-450"/>
<text text-anchor="start" x="1005.5" y="-456.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[int]</text>
</a>
</g>
</g>
<!-- aind_behavior_force_foraging.task_logic.AindForceForagingTaskParameters&#45;&gt;aind_behavior_force_foraging.task_logic.Environment -->
<g id="edge2" class="edge">
<title>aind_behavior_force_foraging.task_logic.AindForceForagingTaskParameters:e&#45;&gt;aind_behavior_force_foraging.task_logic.Environment:w</title>
<path fill="none" stroke="black" d="M780.33,-424.8C833.21,-433.47 826.62,-509.49 875.94,-522.2"/>
<polyline fill="none" stroke="black" points="770,-424 774.98,-424.39 "/>
<polyline fill="none" stroke="black" points="774.98,-424.39 779.97,-424.78 "/>
<polyline fill="none" stroke="black" points="891,-524 886.04,-523.41 "/>
<polygon fill="black" stroke="black" points="885.63,-518.32 884.45,-528.25 882.46,-528.02 883.65,-518.09 885.63,-518.32"/>
<polyline fill="none" stroke="black" points="886.04,-523.41 881.07,-522.81 "/>
<polygon fill="black" stroke="black" points="880.67,-517.73 879.48,-527.66 877.5,-527.42 878.68,-517.49 880.67,-517.73"/>
<polyline fill="none" stroke="black" points="881.07,-522.81 876.11,-522.22 "/>
</g>
<!-- aind_behavior_force_foraging.task_logic.NumericalUpdater -->
<g id="node4" class="node">
<title>aind_behavior_force_foraging.task_logic.NumericalUpdater</title>
<g id="a_node4"><a xlink:title="aind_behavior_force_foraging.task_logic.NumericalUpdater&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="878,-392 878,-413 1114,-413 1114,-392 878,-392"/>
<text text-anchor="start" x="941" y="-399.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">NumericalUpdater</text>
<polygon fill="none" stroke="black" points="878,-371 878,-392 945,-392 945,-371 878,-371"/>
<text text-anchor="start" x="885.5" y="-377.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">operation</text>
<polygon fill="none" stroke="black" points="945,-371 945,-392 1114,-392 1114,-371 945,-371"/>
<text text-anchor="start" x="951.5" y="-377.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">NumericalUpdaterOperation</text>
<polygon fill="none" stroke="black" points="878,-350 878,-371 945,-371 945,-350 878,-350"/>
<text text-anchor="start" x="881" y="-356.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">parameters</text>
<polygon fill="none" stroke="black" points="945,-350 945,-371 1114,-371 1114,-350 945,-350"/>
<text text-anchor="start" x="948" y="-356.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">NumericalUpdaterParameters</text>
</a>
</g>
</g>
<!-- aind_behavior_force_foraging.task_logic.AindForceForagingTaskParameters&#45;&gt;aind_behavior_force_foraging.task_logic.NumericalUpdater -->
<g id="edge3" class="edge">
<title>aind_behavior_force_foraging.task_logic.AindForceForagingTaskParameters:e&#45;&gt;aind_behavior_force_foraging.task_logic.NumericalUpdater:w</title>
<path fill="none" stroke="black" d="M780.12,-403C815,-403 829.76,-403 862.67,-403"/>
<polyline fill="none" stroke="black" points="770,-403 775,-403 "/>
<polyline fill="none" stroke="black" points="775,-403 780,-403 "/>
<polygon fill="black" stroke="black" points="868,-403 878,-407.5 873,-403 878,-403 878,-403 878,-403 873,-403 878,-398.5 868,-403 868,-403"/>
<polyline fill="none" stroke="black" points="868,-403 863,-403 "/>
</g>
<!-- aind_behavior_force_foraging.task_logic.OperationControl -->
<g id="node5" class="node">
<title>aind_behavior_force_foraging.task_logic.OperationControl</title>
<g id="a_node5"><a xlink:title="aind_behavior_force_foraging.task_logic.OperationControl&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="912,-272 912,-293 1081,-293 1081,-272 912,-272"/>
<text text-anchor="start" x="943.5" y="-279.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">OperationControl</text>
<polygon fill="none" stroke="black" points="912,-251 912,-272 948,-272 948,-251 912,-251"/>
<text text-anchor="start" x="916" y="-257.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">force</text>
<polygon fill="none" stroke="black" points="948,-251 948,-272 1081,-272 1081,-251 948,-251"/>
<text text-anchor="start" x="951" y="-257.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">ForceOperationControl</text>
<polygon fill="none" stroke="black" points="912,-230 912,-251 948,-251 948,-230 912,-230"/>
<text text-anchor="start" x="915" y="-236.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">spout</text>
<polygon fill="none" stroke="black" points="948,-230 948,-251 1081,-251 1081,-230 948,-230"/>
<text text-anchor="start" x="951" y="-236.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">SpoutOperationControl</text>
</a>
</g>
</g>
<!-- aind_behavior_force_foraging.task_logic.AindForceForagingTaskParameters&#45;&gt;aind_behavior_force_foraging.task_logic.OperationControl -->
<g id="edge4" class="edge">
<title>aind_behavior_force_foraging.task_logic.AindForceForagingTaskParameters:e&#45;&gt;aind_behavior_force_foraging.task_logic.OperationControl:w</title>
<path fill="none" stroke="black" d="M780.2,-381.37C840.77,-373.56 838.75,-295.9 896.02,-284.42"/>
<polyline fill="none" stroke="black" points="770,-382 774.99,-381.69 "/>
<polyline fill="none" stroke="black" points="774.99,-381.69 779.98,-381.38 "/>
<polyline fill="none" stroke="black" points="911,-283 906.02,-283.47 "/>
<polygon fill="black" stroke="black" points="904.56,-278.59 905.5,-288.54 903.51,-288.73 902.56,-278.78 904.56,-278.59"/>
<polyline fill="none" stroke="black" points="906.02,-283.47 901.04,-283.94 "/>
<polygon fill="black" stroke="black" points="899.58,-279.06 900.52,-289.01 898.53,-289.2 897.59,-279.25 899.58,-279.06"/>
<polyline fill="none" stroke="black" points="901.04,-283.94 896.07,-284.41 "/>
</g>
<!-- aind_behavior_force_foraging.task_logic.NumericalUpdaterParameters -->
<g id="node8" class="node">
<title>aind_behavior_force_foraging.task_logic.NumericalUpdaterParameters</title>
<g id="a_node8"><a xlink:title="aind_behavior_force_foraging.task_logic.NumericalUpdaterParameters&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1270.5,-371 1270.5,-392 1454.5,-392 1454.5,-371 1270.5,-371"/>
<text text-anchor="start" x="1273.5" y="-378.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">NumericalUpdaterParameters</text>
<polygon fill="none" stroke="black" points="1270.5,-350 1270.5,-371 1358.5,-371 1358.5,-350 1270.5,-350"/>
<text text-anchor="start" x="1299.5" y="-356.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">value</text>
<polygon fill="none" stroke="black" points="1358.5,-350 1358.5,-371 1454.5,-371 1454.5,-350 1358.5,-350"/>
<text text-anchor="start" x="1373.5" y="-356.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Distribution</text>
<polygon fill="none" stroke="black" points="1270.5,-329 1270.5,-350 1358.5,-350 1358.5,-329 1270.5,-329"/>
<text text-anchor="start" x="1287" y="-335.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">minimum</text>
<polygon fill="none" stroke="black" points="1358.5,-329 1358.5,-350 1454.5,-350 1454.5,-329 1358.5,-329"/>
<text text-anchor="start" x="1394" y="-335.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1270.5,-308 1270.5,-329 1358.5,-329 1358.5,-308 1270.5,-308"/>
<text text-anchor="start" x="1285.5" y="-314.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">maximum</text>
<polygon fill="none" stroke="black" points="1358.5,-308 1358.5,-329 1454.5,-329 1454.5,-308 1358.5,-308"/>
<text text-anchor="start" x="1394" y="-314.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_force_foraging.task_logic.NumericalUpdater&#45;&gt;aind_behavior_force_foraging.task_logic.NumericalUpdaterParameters -->
<g id="edge6" class="edge">
<title>aind_behavior_force_foraging.task_logic.NumericalUpdater:e&#45;&gt;aind_behavior_force_foraging.task_logic.NumericalUpdaterParameters:w</title>
<path fill="none" stroke="black" d="M1124.23,-360.16C1180.64,-362.02 1200.13,-378.94 1254.47,-381.64"/>
<polyline fill="none" stroke="black" points="1114,-360 1119,-360.08 "/>
<polyline fill="none" stroke="black" points="1119,-360.08 1124,-360.16 "/>
<polyline fill="none" stroke="black" points="1269.5,-382 1264.5,-381.88 "/>
<polygon fill="black" stroke="black" points="1263.62,-376.86 1263.38,-386.85 1261.38,-386.81 1261.62,-376.81 1263.62,-376.86"/>
<polyline fill="none" stroke="black" points="1264.5,-381.88 1259.5,-381.76 "/>
<polygon fill="black" stroke="black" points="1258.62,-376.74 1258.38,-386.73 1256.38,-386.69 1256.62,-376.69 1258.62,-376.74"/>
<polyline fill="none" stroke="black" points="1259.5,-381.76 1254.5,-381.64 "/>
</g>
<!-- aind_behavior_force_foraging.task_logic.ForceOperationControl -->
<g id="node7" class="node">
<title>aind_behavior_force_foraging.task_logic.ForceOperationControl</title>
<g id="a_node7"><a xlink:title="aind_behavior_force_foraging.task_logic.ForceOperationControl&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1222.5,-250 1222.5,-271 1503.5,-271 1503.5,-250 1222.5,-250"/>
<text text-anchor="start" x="1293.5" y="-257.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">ForceOperationControl</text>
<polygon fill="none" stroke="black" points="1222.5,-229 1222.5,-250 1334.5,-250 1334.5,-229 1222.5,-229"/>
<text text-anchor="start" x="1245.5" y="-235.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">press_mode</text>
<polygon fill="none" stroke="black" points="1334.5,-229 1334.5,-250 1503.5,-250 1503.5,-229 1334.5,-229"/>
<text text-anchor="start" x="1388.5" y="-235.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">PressMode</text>
<polygon fill="none" stroke="black" points="1222.5,-208 1222.5,-229 1334.5,-229 1334.5,-208 1222.5,-208"/>
<text text-anchor="start" x="1251" y="-214.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">left_index</text>
<polygon fill="none" stroke="black" points="1334.5,-208 1334.5,-229 1503.5,-229 1503.5,-208 1334.5,-208"/>
<text text-anchor="start" x="1411.5" y="-214.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">int</text>
<polygon fill="none" stroke="black" points="1222.5,-187 1222.5,-208 1334.5,-208 1334.5,-187 1222.5,-187"/>
<text text-anchor="start" x="1247" y="-193.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">right_index</text>
<polygon fill="none" stroke="black" points="1334.5,-187 1334.5,-208 1503.5,-208 1503.5,-187 1334.5,-187"/>
<text text-anchor="start" x="1411.5" y="-193.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">int</text>
<polygon fill="none" stroke="black" points="1222.5,-166 1222.5,-187 1334.5,-187 1334.5,-166 1222.5,-166"/>
<text text-anchor="start" x="1225.5" y="-172.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">force_lookup_table</text>
<polygon fill="none" stroke="black" points="1334.5,-166 1334.5,-187 1503.5,-187 1503.5,-166 1334.5,-166"/>
<text text-anchor="start" x="1337.5" y="-172.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[ForceLookUpTable]</text>
</a>
</g>
</g>
<!-- aind_behavior_force_foraging.task_logic.OperationControl&#45;&gt;aind_behavior_force_foraging.task_logic.ForceOperationControl -->
<g id="edge7" class="edge">
<title>aind_behavior_force_foraging.task_logic.OperationControl:e&#45;&gt;aind_behavior_force_foraging.task_logic.ForceOperationControl:w</title>
<path fill="none" stroke="black" d="M1092.14,-261C1141.18,-261 1159.84,-261 1206.82,-261"/>
<polyline fill="none" stroke="black" points="1082,-261 1087,-261 "/>
<polyline fill="none" stroke="black" points="1087,-261 1092,-261 "/>
<polyline fill="none" stroke="black" points="1222,-261 1217,-261 "/>
<polygon fill="black" stroke="black" points="1216,-256 1216,-266 1214,-266 1214,-256 1216,-256"/>
<polyline fill="none" stroke="black" points="1217,-261 1212,-261 "/>
<polygon fill="black" stroke="black" points="1211,-256 1211,-266 1209,-266 1209,-256 1211,-256"/>
<polyline fill="none" stroke="black" points="1212,-261 1207,-261 "/>
</g>
<!-- aind_behavior_force_foraging.task_logic.SpoutOperationControl -->
<g id="node9" class="node">
<title>aind_behavior_force_foraging.task_logic.SpoutOperationControl</title>
<g id="a_node9"><a xlink:title="aind_behavior_force_foraging.task_logic.SpoutOperationControl&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1272.5,-109 1272.5,-130 1453.5,-130 1453.5,-109 1272.5,-109"/>
<text text-anchor="start" x="1293.5" y="-116.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">SpoutOperationControl</text>
<polygon fill="none" stroke="black" points="1272.5,-88 1272.5,-109 1422.5,-109 1422.5,-88 1272.5,-88"/>
<text text-anchor="start" x="1276.5" y="-94.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">default_retracted_position</text>
<polygon fill="none" stroke="black" points="1422.5,-88 1422.5,-109 1453.5,-109 1453.5,-88 1422.5,-88"/>
<text text-anchor="start" x="1425.5" y="-94.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1272.5,-67 1272.5,-88 1422.5,-88 1422.5,-67 1272.5,-67"/>
<text text-anchor="start" x="1275.5" y="-73.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">default_extended_position</text>
<polygon fill="none" stroke="black" points="1422.5,-67 1422.5,-88 1453.5,-88 1453.5,-67 1422.5,-67"/>
<text text-anchor="start" x="1425.5" y="-73.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1272.5,-46 1272.5,-67 1422.5,-67 1422.5,-46 1272.5,-46"/>
<text text-anchor="start" x="1326" y="-52.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">enabled</text>
<polygon fill="none" stroke="black" points="1422.5,-46 1422.5,-67 1453.5,-67 1453.5,-46 1422.5,-46"/>
<text text-anchor="start" x="1425.5" y="-52.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">bool</text>
</a>
</g>
</g>
<!-- aind_behavior_force_foraging.task_logic.OperationControl&#45;&gt;aind_behavior_force_foraging.task_logic.SpoutOperationControl -->
<g id="edge8" class="edge">
<title>aind_behavior_force_foraging.task_logic.OperationControl:e&#45;&gt;aind_behavior_force_foraging.task_logic.SpoutOperationControl:w</title>
<path fill="none" stroke="black" d="M1092.12,-239.57C1176.09,-232.16 1175.67,-132.32 1256.1,-121.04"/>
<polyline fill="none" stroke="black" points="1082,-240 1087,-239.79 "/>
<polyline fill="none" stroke="black" points="1087,-239.79 1091.99,-239.57 "/>
<polyline fill="none" stroke="black" points="1271.5,-120 1266.51,-120.34 "/>
<polygon fill="black" stroke="black" points="1265.18,-115.41 1265.85,-125.39 1263.85,-125.53 1263.18,-115.55 1265.18,-115.41"/>
<polyline fill="none" stroke="black" points="1266.51,-120.34 1261.52,-120.67 "/>
<polygon fill="black" stroke="black" points="1260.19,-115.75 1260.86,-125.73 1258.87,-125.86 1258.19,-115.88 1260.19,-115.75"/>
<polyline fill="none" stroke="black" points="1261.52,-120.67 1256.53,-121.01 "/>
</g>
<!-- aind_behavior_force_foraging.task_logic.ForceLookUpTable -->
<g id="node6" class="node">
<title>aind_behavior_force_foraging.task_logic.ForceLookUpTable</title>
<g id="a_node6"><a xlink:title="aind_behavior_force_foraging.task_logic.ForceLookUpTable&#10;&#10;Usage docs: https://docs.pydantic.dev/2.10/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of the class variables defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The core schema of the model.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#10; &#160;&#160;&#160;__pydantic_serializer__: The `pydantic&#45;core` `SchemaSerializer` used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The `pydantic&#45;core` `SchemaValidator` used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#10; &#160;&#160;&#160;__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;is set to `&#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: The names of fields explicitly set during instantiation.&#10; &#160;&#160;&#160;__pydantic_private__: Values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1611.5,-165 1611.5,-186 1730.5,-186 1730.5,-165 1611.5,-165"/>
<text text-anchor="start" x="1614.5" y="-172.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">ForceLookUpTable</text>
<polygon fill="none" stroke="black" points="1611.5,-144 1611.5,-165 1686.5,-165 1686.5,-144 1611.5,-144"/>
<text text-anchor="start" x="1637" y="-150.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">path</text>
<polygon fill="none" stroke="black" points="1686.5,-144 1686.5,-165 1730.5,-165 1730.5,-144 1686.5,-144"/>
<text text-anchor="start" x="1701.5" y="-150.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="1611.5,-123 1611.5,-144 1686.5,-144 1686.5,-123 1611.5,-123"/>
<text text-anchor="start" x="1633.5" y="-129.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">offset</text>
<polygon fill="none" stroke="black" points="1686.5,-123 1686.5,-144 1730.5,-144 1730.5,-123 1686.5,-123"/>
<text text-anchor="start" x="1696" y="-129.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1611.5,-102 1611.5,-123 1686.5,-123 1686.5,-102 1611.5,-102"/>
<text text-anchor="start" x="1635" y="-108.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">scale</text>
<polygon fill="none" stroke="black" points="1686.5,-102 1686.5,-123 1730.5,-123 1730.5,-102 1686.5,-102"/>
<text text-anchor="start" x="1696" y="-108.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1611.5,-81 1611.5,-102 1686.5,-102 1686.5,-81 1611.5,-81"/>
<text text-anchor="start" x="1625.5" y="-87.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">left_min</text>
<polygon fill="none" stroke="black" points="1686.5,-81 1686.5,-102 1730.5,-102 1730.5,-81 1686.5,-81"/>
<text text-anchor="start" x="1696" y="-87.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1611.5,-60 1611.5,-81 1686.5,-81 1686.5,-60 1611.5,-60"/>
<text text-anchor="start" x="1624.5" y="-66.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">left_max</text>
<polygon fill="none" stroke="black" points="1686.5,-60 1686.5,-81 1730.5,-81 1730.5,-60 1686.5,-60"/>
<text text-anchor="start" x="1696" y="-66.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1611.5,-39 1611.5,-60 1686.5,-60 1686.5,-39 1611.5,-39"/>
<text text-anchor="start" x="1621.5" y="-45.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">right_min</text>
<polygon fill="none" stroke="black" points="1686.5,-39 1686.5,-60 1730.5,-60 1730.5,-39 1686.5,-39"/>
<text text-anchor="start" x="1696" y="-45.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1611.5,-18 1611.5,-39 1686.5,-39 1686.5,-18 1611.5,-18"/>
<text text-anchor="start" x="1620.5" y="-24.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">right_max</text>
<polygon fill="none" stroke="black" points="1686.5,-18 1686.5,-39 1730.5,-39 1730.5,-18 1686.5,-18"/>
<text text-anchor="start" x="1696" y="-24.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_force_foraging.task_logic.ForceOperationControl&#45;&gt;aind_behavior_force_foraging.task_logic.ForceLookUpTable -->
<g id="edge5" class="edge">
<title>aind_behavior_force_foraging.task_logic.ForceOperationControl:e&#45;&gt;aind_behavior_force_foraging.task_logic.ForceLookUpTable:w</title>
<path fill="none" stroke="black" d="M1513.12,-176C1546.91,-176 1561.81,-176 1592.64,-176"/>
<polyline fill="none" stroke="black" points="1503,-176 1508,-176 "/>
<polyline fill="none" stroke="black" points="1508,-176 1513,-176 "/>
<polyline fill="none" stroke="black" points="1611,-176 1606,-176 "/>
<polygon fill="black" stroke="black" points="1605,-171 1605,-181 1603,-181 1603,-171 1605,-171"/>
<polyline fill="none" stroke="black" points="1606,-176 1601,-176 "/>
<ellipse fill="none" stroke="black" cx="1597" cy="-176" rx="4" ry="4"/>
</g>
</g>
</svg>
